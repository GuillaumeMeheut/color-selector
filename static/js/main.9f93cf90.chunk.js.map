{"version":3,"sources":["components/color.jsx","components/button.jsx","components/copied.jsx","components/colors.jsx","App.js","serviceWorker.js","index.js"],"names":["Color","state","copyText","text","navigator","clipboard","writeText","props","triggerCopied","hexa","getOpositeColor","rgb","indexOf","replace","x","exec","color","r","parseInt","g","b","returnCadenaSvg","textFillColor","locked","width","height","viewBox","fill","xmlns","y","rx","className","d","stroke","stroke-width","this","cadenaSVG","class","style","backgroundColor","transitionDelay","onClick","triggerLocked","id","Component","Button","buttonClicked","buttonContent","buttonTransition","setState","prevState","setTimeout","triggerColorClass","randomize","Copied","Colors","colors","colorClass","copiedClass","copiedColor","randomizeColor","map","c","Math","random","toString","padStart","toUpperCase","e","key","App","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9f93cf90.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./color.css\";\r\n\r\nclass Color extends Component {\r\n  state = {};\r\n\r\n  copyText = (text) => {\r\n    navigator.clipboard.writeText(text);\r\n    this.props.triggerCopied(this.props.hexa);\r\n  };\r\n\r\n  getOpositeColor = (rgb) => {\r\n    // Like this : rgb(0, 0, 0);\r\n    while (rgb.indexOf(\" \") !== -1) rgb = rgb.replace(\" \", \"\");\r\n    //Check if is formatted as RGB\r\n    let x;\r\n    if ((x = /([0-9]{0,3}),([0-9]{0,3}),([0-9]{0,3})/.exec(rgb))) {\r\n      //Extract colors\r\n      const color = {\r\n        r: parseInt(x[1]),\r\n        g: parseInt(x[2]),\r\n        b: parseInt(x[3]),\r\n      };\r\n      //If is this operation be <= 128 return white, others else return black\r\n      const OpositeColor =\r\n        0.3 * color[\"r\"] + 0.59 * color[\"g\"] + 0.11 * color[\"b\"] <= 128 ? \"#FFF\" : \"#000\";\r\n      return OpositeColor;\r\n    }\r\n    return -1;\r\n  };\r\n\r\n  returnCadenaSvg = (textFillColor) => {\r\n    if (this.props.locked)\r\n      return (\r\n        <svg\r\n          width=\"24\"\r\n          height=\"29\"\r\n          viewBox=\"0 0 24 29\"\r\n          fill=\"none\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n        >\r\n          <rect\r\n            y=\"10.2448\"\r\n            width=\"24\"\r\n            height=\"18\"\r\n            rx=\"4\"\r\n            fill={textFillColor}\r\n            className=\"cadenas\"\r\n          />\r\n          <path\r\n            d=\"M6 7.86956C5.99999 2.32609 9.07107 2 12 2C14.9289 2 18 2 18 7.86956C18 9.90159 18 11.621 18 13.0006C18 15.2097 16.2091 17 14 17H10C7.79087 17 6 15.211 6 13.0018C6 11.5926 6 9.85679 6 7.86956Z\"\r\n            stroke={textFillColor}\r\n            stroke-width=\"3\"\r\n            className=\"cadenas\"\r\n          />\r\n        </svg>\r\n      );\r\n    else\r\n      return (\r\n        <svg\r\n          width=\"24\"\r\n          height=\"31\"\r\n          viewBox=\"0 0 24 31\"\r\n          fill=\"none\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n        >\r\n          <rect\r\n            y=\"12.2448\"\r\n            width=\"24\"\r\n            height=\"18\"\r\n            rx=\"4\"\r\n            fill={textFillColor}\r\n            className=\"cadenas\"\r\n          />\r\n          <path\r\n            d=\"M6 6.69565C5.99999 2.26087 9.07107 2 12 2C14.9289 2 18 2 18 6.69565C18 11.3913 18 14 18 14\"\r\n            stroke={textFillColor}\r\n            stroke-width=\"3\"\r\n            className=\"cadenas\"\r\n          />\r\n        </svg>\r\n      );\r\n  };\r\n\r\n  render() {\r\n    const textFillColor = this.getOpositeColor(this.props.rgb);\r\n    const cadenaSVG = this.returnCadenaSvg(textFillColor);\r\n    return (\r\n      <div className=\"colorContainer\">\r\n        <div\r\n          className={this.props.locked ? \"myColor myColorActivated\" : this.props.class}\r\n          style={{\r\n            backgroundColor: this.props.hexa,\r\n            transitionDelay: this.props.transitionDelay,\r\n            color: textFillColor,\r\n          }}\r\n        >\r\n          <p className=\"text\" onClick={() => this.copyText(this.props.hexa)}>\r\n            {this.props.hexa}\r\n          </p>\r\n          <p className=\"text\" onClick={() => this.copyText(this.props.rgb)}>\r\n            {this.props.rgb}\r\n          </p>\r\n          <span onClick={() => this.props.triggerLocked(this.props.id)}>{cadenaSVG}</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Color;\r\n","import React, { Component } from \"react\";\r\nimport \"./button.css\";\r\n\r\nclass Button extends Component {\r\n  state = {\r\n    buttonClicked: true,\r\n    buttonContent: \"REFRESH\",\r\n  };\r\n\r\n  buttonTransition = () => {\r\n    this.setState((prevState) => ({\r\n      buttonClicked: !prevState.buttonClicked,\r\n      buttonContent: \"\",\r\n    }));\r\n    setTimeout(() => {\r\n      this.setState((prevState) => ({\r\n        buttonClicked: !prevState.buttonClicked,\r\n        buttonContent: \"REFRESH\",\r\n      }));\r\n    }, 700);\r\n  };\r\n\r\n  render() {\r\n    const { buttonClicked } = this.state;\r\n    return (\r\n      <button\r\n        className={`${buttonClicked ? \"buttonRefresh\" : \" buttonRefresh buttonRefreshClicked\"}`}\r\n        onClick={() => {\r\n          this.props.triggerColorClass();\r\n          this.props.randomize();\r\n          this.buttonTransition();\r\n        }}\r\n      >\r\n        <span className={`${buttonClicked ? \"spanButton\" : \"spanButtonClicked\"}`}>\r\n          {this.state.buttonContent}\r\n        </span>\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Button;\r\n","import React, { Component } from \"react\";\r\nimport \"./copied.css\";\r\n\r\nclass Copied extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div className={this.props.class} style={{ backgroundColor: this.props.color }}>\r\n        <div className=\"textContainer\" style={{ backgroundColor: this.props.color }}>\r\n          <p className=\"textCopied\">COPIED !</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Copied;\r\n","import React, { Component } from \"react\";\r\nimport Color from \"./color\";\r\nimport Button from \"./button\";\r\nimport Copied from \"./copied\";\r\nimport \"./colors.css\";\r\n\r\nclass Colors extends Component {\r\n  state = {\r\n    colors: [\r\n      {\r\n        id: 1,\r\n        hexa: \"#000000\",\r\n        rgb: \"rgb(0,0,0)\",\r\n        transitionDelay: \"0s\",\r\n\r\n        locked: false,\r\n      },\r\n      {\r\n        id: 2,\r\n        hexa: \"#000000\",\r\n        rgb: \"rgb(0,0,0)\",\r\n        transitionDelay: \"0.1s\",\r\n\r\n        locked: false,\r\n      },\r\n      {\r\n        id: 3,\r\n        hexa: \"#000000\",\r\n        rgb: \"rgb(0,0,0)\",\r\n        transitionDelay: \"0.2s\",\r\n\r\n        locked: false,\r\n      },\r\n      {\r\n        id: 4,\r\n        hexa: \"#000000\",\r\n        rgb: \"rgb(0,0,0)\",\r\n        transitionDelay: \"0.3s\",\r\n\r\n        locked: false,\r\n      },\r\n      {\r\n        id: 5,\r\n        hexa: \"#000000\",\r\n        rgb: \"rgb(0,0,0)\",\r\n        transitionDelay: \"0.3s\",\r\n\r\n        locked: false,\r\n      },\r\n      {\r\n        id: 6,\r\n        hexa: \"#000000\",\r\n        rgb: \"rgb(0,0,0)\",\r\n        transitionDelay: \"0.2s\",\r\n\r\n        locked: false,\r\n      },\r\n      {\r\n        id: 7,\r\n        hexa: \"#000000\",\r\n        rgb: \"rgb(0,0,0)\",\r\n        transitionDelay: \"0.1s\",\r\n\r\n        locked: false,\r\n      },\r\n      {\r\n        id: 8,\r\n        hexa: \"#000000\",\r\n        rgb: \"rgb(0,0,0)\",\r\n        transitionDelay: \"0s\",\r\n\r\n        locked: false,\r\n      },\r\n    ],\r\n    colorClass: \"myColor\",\r\n    copiedClass: \"background backgroundDesactivated\",\r\n    copiedColor: null,\r\n  };\r\n\r\n  randomizeColor = () => {\r\n    const colors = this.state.colors.map((c) => {\r\n      if (!c.locked) {\r\n        const color = ~~(Math.random() * 0xffffff);\r\n        c.hexa = \"#\" + color.toString(16).padStart(6, \"0\").toUpperCase();\r\n        c.rgb = \"RGB(\" + (color >> 16) + \",\" + ((color >> 8) & 0xff) + \",\" + (color & 0xff) + \")\";\r\n        return c;\r\n      } else return c;\r\n    });\r\n    this.setState({ colors });\r\n  };\r\n\r\n  triggerColorClass = () => {\r\n    let c = \"myColor\";\r\n    this.setState({ colorClass: c });\r\n    setTimeout(() => {\r\n      c = \"myColor myColorActivated\";\r\n      this.setState({ colorClass: c });\r\n    }, 800);\r\n  };\r\n\r\n  triggerCopied = (color) => {\r\n    let c = \"background backgroundActivated\";\r\n    this.setState({ copiedColor: color });\r\n    this.setState({ copiedClass: c });\r\n    setTimeout(() => {\r\n      c = \"background backgroundDesactivated\";\r\n      this.setState({ copiedClass: c });\r\n    }, 500);\r\n  };\r\n\r\n  triggerLocked = (e) => {\r\n    let colors = [...this.state.colors];\r\n    colors[e - 1].locked = !this.state.colors[e - 1].locked;\r\n    this.setState({ colors });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"appContainer\">\r\n        <Button randomize={this.randomizeColor} triggerColorClass={this.triggerColorClass} />\r\n        <Copied class={this.state.copiedClass} color={this.state.copiedColor} />\r\n        <div className=\"colorsContainer\">\r\n          {this.state.colors.map((color) => (\r\n            <Color\r\n              key={color.id}\r\n              id={color.id}\r\n              hexa={color.hexa}\r\n              rgb={color.rgb}\r\n              class={this.state.colorClass}\r\n              transitionDelay={color.transitionDelay}\r\n              locked={color.locked}\r\n              triggerLocked={this.triggerLocked}\r\n              triggerCopied={this.triggerCopied}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Colors;\r\n","import React from \"react\";\nimport Colors from \"./components/colors\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Colors />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}