{"version":3,"sources":["components/color.jsx","components/button.jsx","components/colors.jsx","App.js","serviceWorker.js","index.js"],"names":["Color","state","copyText","text","navigator","clipboard","writeText","className","style","backgroundColor","this","props","hexa","onClick","rgb","Component","Button","buttonClicked","buttonContent","buttonTransition","setState","prevState","setTimeout","randomize","Colors","colors","id","textColor","randomizeColor","map","c","color","Math","random","toString","padStart","toUpperCase","key","App","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2UA0BeA,G,kNAtBbC,MAAQ,G,EAERC,SAAW,SAACC,GACVC,UAAUC,UAAUC,UAAUH,I,uDAGtB,IAAD,OACP,OACE,yBAAKI,UAAU,kBACb,yBAAKA,UAAU,UAAUC,MAAO,CAAEC,gBAAiBC,KAAKC,MAAMC,OAC5D,uBAAGL,UAAU,OAAOM,QAAS,kBAAM,EAAKX,SAAS,EAAKS,MAAMC,QACzDF,KAAKC,MAAMC,MAEd,uBAAGL,UAAU,OAAOM,QAAS,kBAAM,EAAKX,SAAS,EAAKS,MAAMG,OACzDJ,KAAKC,MAAMG,W,GAfJC,cCqCLC,G,kNApCbf,MAAQ,CACNgB,eAAe,EACfC,cAAe,W,EAGjBC,iBAAmB,WACjB,EAAKC,UAAS,SAACC,GAAD,MAAgB,CAC5BJ,eAAgBI,EAAUJ,cAC1BC,cAAe,OAEjBI,YAAW,WACT,EAAKF,UAAS,SAACC,GAAD,MAAgB,CAC5BJ,eAAgBI,EAAUJ,cAC1BC,cAAe,gBAEhB,M,uDAGK,IAAD,OACCD,EAAkBP,KAAKT,MAAvBgB,cACR,OACE,4BACEV,UAAS,UAAKU,EAAgB,gBAAkB,uCAChDJ,QAAS,WACP,EAAKF,MAAMY,YACX,EAAKJ,qBAGP,0BAAMZ,UAAS,UAAKU,EAAgB,aAAe,sBAChDP,KAAKT,MAAMiB,oB,GA9BDH,cCyCNS,G,kNAtCbvB,MAAQ,CACNwB,OAAQ,CACN,CAAEC,GAAI,EAAGd,KAAM,UAAWE,IAAK,aAAca,UAAW,WACxD,CAAED,GAAI,EAAGd,KAAM,UAAWE,IAAK,aAAca,UAAW,WACxD,CAAED,GAAI,EAAGd,KAAM,UAAWE,IAAK,aAAca,UAAW,WACxD,CAAED,GAAI,EAAGd,KAAM,UAAWE,IAAK,aAAca,UAAW,WACxD,CAAED,GAAI,EAAGd,KAAM,UAAWE,IAAK,aAAca,UAAW,WACxD,CAAED,GAAI,EAAGd,KAAM,UAAWE,IAAK,aAAca,UAAW,WACxD,CAAED,GAAI,EAAGd,KAAM,UAAWE,IAAK,aAAca,UAAW,WACxD,CAAED,GAAI,EAAGd,KAAM,UAAWE,IAAK,aAAca,UAAW,a,EAI5DC,eAAiB,WACf,IAAMH,EAAS,EAAKxB,MAAMwB,OAAOI,KAAI,SAACC,GACpC,IAAMC,KAA2B,SAAhBC,KAAKC,UAGtB,OAFAH,EAAElB,KAAO,IAAMmB,EAAMG,SAAS,IAAIC,SAAS,EAAG,KAAKC,cACnDN,EAAEhB,IAAM,QAAUiB,GAAS,IAAM,KAAQA,GAAS,EAAK,KAAQ,KAAe,IAARA,GAAgB,IAC/ED,KAET,EAAKV,SAAS,CAAEK,Y,uDAIhB,OACE,yBAAKlB,UAAU,gBACb,kBAAC,EAAD,CAAQgB,UAAWb,KAAKkB,iBAExB,yBAAKrB,UAAU,mBACZG,KAAKT,MAAMwB,OAAOI,KAAI,SAACE,GAAD,OACrB,kBAAC,EAAD,CAAOM,IAAKN,EAAML,GAAId,KAAMmB,EAAMnB,KAAME,IAAKiB,EAAMjB,IAAKa,UAAWI,EAAMJ,qB,GA/BhEZ,c,MCONuB,MARf,WACE,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmB7C,WACrBA,UAAU8C,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e524d561.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./color.css\";\r\n\r\nclass Color extends Component {\r\n  state = {};\r\n\r\n  copyText = (text) => {\r\n    navigator.clipboard.writeText(text);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"colorContainer\">\r\n        <div className=\"myColor\" style={{ backgroundColor: this.props.hexa }}>\r\n          <p className=\"text\" onClick={() => this.copyText(this.props.hexa)}>\r\n            {this.props.hexa}\r\n          </p>\r\n          <p className=\"text\" onClick={() => this.copyText(this.props.rgb)}>\r\n            {this.props.rgb}\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Color;\r\n","import React, { Component } from \"react\";\r\nimport \"./button.css\";\r\n\r\nclass Button extends Component {\r\n  state = {\r\n    buttonClicked: true,\r\n    buttonContent: \"REFRESH\",\r\n  };\r\n\r\n  buttonTransition = () => {\r\n    this.setState((prevState) => ({\r\n      buttonClicked: !prevState.buttonClicked,\r\n      buttonContent: \"\",\r\n    }));\r\n    setTimeout(() => {\r\n      this.setState((prevState) => ({\r\n        buttonClicked: !prevState.buttonClicked,\r\n        buttonContent: \"REFRESH\",\r\n      }));\r\n    }, 700);\r\n  };\r\n\r\n  render() {\r\n    const { buttonClicked } = this.state;\r\n    return (\r\n      <button\r\n        className={`${buttonClicked ? \"buttonRefresh\" : \" buttonRefresh buttonRefreshClicked\"}`}\r\n        onClick={() => {\r\n          this.props.randomize();\r\n          this.buttonTransition();\r\n        }}\r\n      >\r\n        <span className={`${buttonClicked ? \"spanButton\" : \"spanButtonClicked\"}`}>\r\n          {this.state.buttonContent}\r\n        </span>\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Button;\r\n","import React, { Component } from \"react\";\r\nimport Color from \"./color\";\r\nimport Button from \"./button\";\r\nimport \"./colors.css\";\r\n\r\nclass Colors extends Component {\r\n  state = {\r\n    colors: [\r\n      { id: 1, hexa: \"#000000\", rgb: \"rgb(0,0,0)\", textColor: \"#FFFFFF\" },\r\n      { id: 2, hexa: \"#000000\", rgb: \"rgb(0,0,0)\", textColor: \"#ffffff\" },\r\n      { id: 3, hexa: \"#000000\", rgb: \"rgb(0,0,0)\", textColor: \"#ffffff\" },\r\n      { id: 4, hexa: \"#000000\", rgb: \"rgb(0,0,0)\", textColor: \"#ffffff\" },\r\n      { id: 5, hexa: \"#000000\", rgb: \"rgb(0,0,0)\", textColor: \"#ffffff\" },\r\n      { id: 6, hexa: \"#000000\", rgb: \"rgb(0,0,0)\", textColor: \"#ffffff\" },\r\n      { id: 7, hexa: \"#000000\", rgb: \"rgb(0,0,0)\", textColor: \"#ffffff\" },\r\n      { id: 8, hexa: \"#000000\", rgb: \"rgb(0,0,0)\", textColor: \"#ffffff\" },\r\n    ],\r\n  };\r\n\r\n  randomizeColor = () => {\r\n    const colors = this.state.colors.map((c) => {\r\n      const color = ~~(Math.random() * 0xffffff);\r\n      c.hexa = \"#\" + color.toString(16).padStart(6, \"0\").toUpperCase();\r\n      c.rgb = \"RGB(\" + (color >> 16) + \",\" + ((color >> 8) & 0xff) + \",\" + (color & 0xff) + \")\";\r\n      return c;\r\n    });\r\n    this.setState({ colors });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"appContainer\">\r\n        <Button randomize={this.randomizeColor} />\r\n\r\n        <div className=\"colorsContainer\">\r\n          {this.state.colors.map((color) => (\r\n            <Color key={color.id} hexa={color.hexa} rgb={color.rgb} textColor={color.textColor} />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Colors;\r\n","import React from \"react\";\nimport Colors from \"./components/colors\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Colors />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}